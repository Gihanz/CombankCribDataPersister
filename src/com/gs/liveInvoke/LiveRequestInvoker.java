package com.gs.liveInvoke;

import java.net.URL;
import java.util.Properties;

import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

import com.gs.util.PropertyReader;

import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.10
 * 2021-01-14T20:32:07.788+05:30
 * Generated source version: 2.7.10
 * 
 */
@WebServiceClient(name = "LiveRequestInvoker", 
                  wsdlLocation = "file:/C:/Users/GIHAN/Documents/eclipse%20workspace%20ComBank/ComBankOperations/src/main/java/resources/LiveRequestinvoker.wsdl",
                  targetNamespace = "http://tempuri.org/") 
public class LiveRequestInvoker extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://tempuri.org/", "LiveRequestInvoker");
    public final static QName LiveRequestInvokerSoap12 = new QName("http://tempuri.org/", "LiveRequestInvokerSoap12");
    public final static QName LiveRequestInvokerSoap = new QName("http://tempuri.org/", "LiveRequestInvokerSoap");
    private static Properties prop;
	public static Logger log = Logger.getLogger(LiveRequestInvoker.class);
    static {
        URL url = null;
        try {
        	PropertyReader pr = new PropertyReader();
	    	prop = pr.loadPropertyFile();
	    	
			String pathSep = System.getProperty("file.separator");
	        String logpath = prop.getProperty("LOG4J_FILE_PATH");
	        String activityRoot = prop.getProperty("LOG_PATH");
			String logPropertyFile =logpath+pathSep+"log4j.properties"; 
	
			PropertyConfigurator.configure(logPropertyFile);
			PropertyReader.loadLogConfiguration(logPropertyFile, activityRoot+"/CribApiCall/", "CribApiCall.log");
            url = new URL(prop.getProperty("WSDL_URL"));
        } catch (Exception e) {
            java.util.logging.Logger.getLogger(LiveRequestInvoker.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", prop.getProperty("WSDL_URL"));
        }
        WSDL_LOCATION = url;
    }

    public LiveRequestInvoker(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public LiveRequestInvoker(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public LiveRequestInvoker() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public LiveRequestInvoker(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public LiveRequestInvoker(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public LiveRequestInvoker(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns LiveRequestInvokerSoap
     */
    @WebEndpoint(name = "LiveRequestInvokerSoap12")
    public LiveRequestInvokerSoap getLiveRequestInvokerSoap12() {
        return super.getPort(LiveRequestInvokerSoap12, LiveRequestInvokerSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns LiveRequestInvokerSoap
     */
    @WebEndpoint(name = "LiveRequestInvokerSoap12")
    public LiveRequestInvokerSoap getLiveRequestInvokerSoap12(WebServiceFeature... features) {
        return super.getPort(LiveRequestInvokerSoap12, LiveRequestInvokerSoap.class, features);
    }
    /**
     *
     * @return
     *     returns LiveRequestInvokerSoap
     */
    @WebEndpoint(name = "LiveRequestInvokerSoap")
    public LiveRequestInvokerSoap getLiveRequestInvokerSoap() {
        return super.getPort(LiveRequestInvokerSoap, LiveRequestInvokerSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns LiveRequestInvokerSoap
     */
    @WebEndpoint(name = "LiveRequestInvokerSoap")
    public LiveRequestInvokerSoap getLiveRequestInvokerSoap(WebServiceFeature... features) {
        return super.getPort(LiveRequestInvokerSoap, LiveRequestInvokerSoap.class, features);
    }

}
